local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()
--amelia
local Window = Rayfield:CreateWindow({
   Name = "Saber Simulator | Austin Scripts",
   Icon = "blinds",
   LoadingTitle = "Saber Simulator",
   LoadingSubtitle = "by Austin Scripts",
   Theme = "Default",

   ToggleUIKeybind = "K",

   ConfigurationSaving = {
      Enabled = false,
      FolderName = nil,
      FileName = "SaberSimulator"
   },

   Discord = {
      Enabled = true,
      Invite = "tMTpDsGcdT",
      RememberJoins = true
   },
   KeySystem = false,
})

--// Services \\--
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

--// Vars \\--
local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")
local Remotes = ReplicatedStorage:WaitForChild("Events")

local effectsFrame = playerGui:WaitForChild("MainGui"):WaitForChild("EffectsFrame")
local shopFrame = playerGui:WaitForChild("MainGui"):WaitForChild("OtherFrames"):WaitForChild("Shop")
local flagsFolder = workspace:WaitForChild("Gameplay").Flags

local ownedFlags = {}
local capturing = false 
local hbConn

local function teleportAbove(basePart)
    local char = player.Character or player.CharacterAdded:Wait()
    char:WaitForChild("HumanoidRootPart")
    local rootPart = char.HumanoidRootPart
    if rootPart and basePart then
        rootPart.CFrame = basePart.CFrame + Vector3.new(0, 5, 0)
    end
end

local function findNextFlag()
    for _, model in ipairs(flagsFolder:GetChildren()) do
        if model:IsA("Model") then
            local owner = model:GetAttribute("OwnerName")
            print("Checking flag:", model.Name, "Owned by:", owner)
            if owner ~= player.Name then
                print("Found capturable flag:", model.Name)
                return model
            end
        end
    end
    print("No capturable flags found.")
    return nil
end

local function captureFlag(flagModel)
    local base = flagModel:FindFirstChild("Base")
    if not base then return end -- safety

    capturing = true

    local captured = false

    local function checkDone()
        local owner = flagModel:GetAttribute("OwnerName")
        local cap = flagModel:GetAttribute("CapValue") or 0
        if owner == player.Name and cap >= 10 then
            captured = true
        end
    end

    -- Listen for updates
    local capConn = flagModel:GetAttributeChangedSignal("CapValue"):Connect(checkDone)
    local ownerConn = flagModel:GetAttributeChangedSignal("OwnerName"):Connect(checkDone)

    -- Loop while not captured
    while not captured and AutoFlags do
        teleportAbove(base)
        checkDone()
        task.wait(0.5)
    end

    capConn:Disconnect()
    ownerConn:Disconnect()

    if captured then
        ownedFlags[flagModel] = true
    end
    capturing = false
end

local function getOtherPlayers()
	local others = {}
	for _, p in pairs(Players:GetPlayers()) do
		if p ~= player and p.Character and p.Character:FindFirstChild("HumanoidRootPart") and p.Character:FindFirstChild("Humanoid") then
			local hrp = p.Character.HumanoidRootPart
			local hum = p.Character.Humanoid
			if hum.Health > 0 then
				table.insert(others, p)
			end
		end
	end
	return others
end

local function getHRP()
	return player.Character and player.Character:FindFirstChild("HumanoidRootPart")
end

local function distanceTo(position)
	return (HumanoidRootPart.Position - position).Magnitude
end

local function l(player, part)
    firetouchinterest(player, part, 0)
end

local AutoPickup = false
local AutoFlags = false
local AutoSell = false
local AutoStrength = false
local AutoBuy = false
local AutoTimed = false
local AutoKill = false

local lastSwingTime = 0
local swingDelay = 0.1
local heartbeatConnection

local killDistance = 20

--// Tabs \\--
local infoTab = Window:CreateTab("Info")
local autoTab = Window:CreateTab("Auto")
local hatchTab = Window:CreateTab("Hatch")
local teleportTab = Window:CreateTab("Teleports")

--// misc \\--
infoTab:CreateLabel("Info")

local Divider = infoTab:CreateDivider()

local destroyGui = infoTab:CreateButton({
    Name = "Destroy UI",
    Callback = function()
        Rayfield:Destroy()
    end,
})

--// auto \\--
autoTab:CreateLabel("Autos")
autoTab:CreateDivider()

local autoPickup = autoTab:CreateToggle({
   Name = "Auto Pickup",
   Flag = "Pickup",
   CurrentValue = false,
   Callback = function(Value)
      AutoPickup = Value
      while AutoPickup do
        effectsFrame.Visible = false
        local rootPart = getHRP()
        local items = workspace.Gameplay.CurrencyPickup.CurrencyHolder:GetChildren()
	    for _, item in ipairs(items) do
		    l(rootPart, item)
	    end
         task.wait(0.1)
      end
   end,
})

local autoKill = autoTab:CreateToggle({
	Name = "Auto Kill",
	Flag = "Kill",
	CurrentValue = false,
	Callback = function(Value)
		AutoKill = Value
		task.spawn(function()
			while AutoKill do
				local root = getHRP()
				if root then
					for _, target in pairs(getOtherPlayers()) do
						local theirRoot = target.Character.HumanoidRootPart
						if (theirRoot.Position - root.Position).Magnitude <= killDistance then
							-- TP behind or on top
							root.CFrame = theirRoot.CFrame * CFrame.new(0, 0, 2)
							Remotes.SwingSaber:FireServer()
						end
					end
				end
				task.wait(0.05)
			end
		end)
	end,
})

local autoBuy = autoTab:CreateToggle({
    Name = "Auto Buy",
    Flag = "Buy",
    CurrentValue = false,
    Callback = function(Value)
        AutoBuy = Value
        while AutoBuy do
            shopFrame.Visible = true
            shopFrame.Frames.Visible = false
            shopFrame.TopBar.Visible = false
            shopFrame.TopButtons.Visible = false
            shopFrame.BKG.Visible = false
            Remotes.UIAction:FireServer("BuyAllWeapons")
            wait()
            Remotes.UIAction:FireServer("BuyAllDNAs")
            task.wait(0.5)
        end
    end,
})

local autoStrenth = autoTab:CreateToggle({
	Name = "Auto Strength",
	Flag = "Strength",
	CurrentValue = false,
	Callback = function(Value)
		AutoStrength = Value

		if AutoStrength then
			lastSwingTime = os.clock()
			heartbeatConnection = RunService.Heartbeat:Connect(function()
				if os.clock() - lastSwingTime >= swingDelay then
					Remotes.SwingSaber:FireServer()
					lastSwingTime = os.clock()
				end
			end)
		else
			if heartbeatConnection then
				heartbeatConnection:Disconnect()
				heartbeatConnection = nil
			end
		end
	end,
})

local autoSell = autoTab:CreateToggle({
   Name = "Auto Sell",
   Flag = "Sell",
   CurrentValue = false,
   Callback = function(Value)
      AutoSell = Value
      while AutoSell do
         Remotes.SellStrength:FireServer()
         task.wait(0.25)
      end
   end,
})

local autoFlag = autoTab:CreateToggle({
   Name = "Auto Flag",
   Flag = "Flags",
   CurrentValue = false,
   Callback = function(Value)
      AutoFlags = Value

      if AutoFlags then
         hbConn = RunService.Heartbeat:Connect(function()
            if not capturing then
               local target = findNextFlag()
               if target then
                  capturing = true
                  captureFlag(target)
                  capturing = false
               end
            end
         end)
      else
         if hbConn then
            hbConn:Disconnect()
            hbConn = nil
         end
         capturing = false
      end
   end,
})

local autoTimed = autoTab:CreateToggle({
   Name = "Auto Rewards",
   Flag = "Timed",
   CurrentValue = false,
   Callback = function(Value)
      AutoTimed = Value
      while AutoTimed do
         Remotes.UIAction:FireServer("ClaimDailyTimedRewards")
         wait()
         Remotes.UIAction:FireServer("ClaimDailyReward")
         task.wait(30)
      end
   end,
})

--// teleport \\--
teleportTab:CreateLabel("The Overwold")

teleportTab:CreateButton({
    Name = "Spawn",
    Callback = function()
        
    end,
})

teleportTab:CreateButton({
    Name = "Floating Island",
    Callback = function()
        
    end,
})

teleportTab:CreateButton({
    Name = "Outer Space",
    Callback = function()
        
    end,
})

teleportTab:CreateButton({
    Name = "Twilight",
    Callback = function()
        
    end,
})

teleportTab:CreateButton({
    Name = "The Void",
    Callback = function()
        
    end,
})

teleportTab:CreateButton({
    Name = "Zen",
    Callback = function()
        
    end,
})

teleportTab:CreateDivider()
